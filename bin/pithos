#!/usr/bin/python
# -*- coding: utf-8; tab-width: 4; indent-tabs-mode: nil; -*-
### BEGIN LICENSE
# Copyright (C) 2010 Kevin Mehall <km@kevinmehall.net>
#This program is free software: you can redistribute it and/or modify it 
#under the terms of the GNU General Public License version 3, as published 
#by the Free Software Foundation.
#
#This program is distributed in the hope that it will be useful, but 
#WITHOUT ANY WARRANTY; without even the implied warranties of 
#MERCHANTABILITY, SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR 
#PURPOSE.  See the GNU General Public License for more details.
#
#You should have received a copy of the GNU General Public License along 
#with this program.  If not, see <http://www.gnu.org/licenses/>.
### END LICENSE

import sys
import os
import gtk, gobject

# optional Launchpad integration
# this shouldn't crash if not found as it is simply used for bug reporting
try:
    import LaunchpadIntegration
    launchpad_available = True
except:
    launchpad_available = False

import gst
import cgi
import pynotify
import webbrowser
import urllib
import dbus
from dbus.mainloop.glib import DBusGMainLoop
DBusGMainLoop(set_as_default=True)

# Check if we are working in the source tree or from the installed 
# package and mangle the python path accordingly
if os.path.dirname(sys.argv[0]) != ".":
    if sys.argv[0][0] == "/":
        fullPath = os.path.dirname(sys.argv[0])
    else:
        fullPath = os.getcwd() + "/" + os.path.dirname(sys.argv[0])
else:
    fullPath = os.getcwd()
sys.path.insert(0, os.path.dirname(fullPath))

from pithos import AboutPithosDialog, PreferencesPithosDialog, StationsDialog
from pithos.pithosconfig import getdatapath
from pithos.gobject_worker import GObjectWorker

def unifyMenuToolButton(menu_button):
    """Rearranges the subwidgets of a MenuToolButton so it is one single button
    with a menu dropdown instead of a seperate button and arrow"""
    # credit: http://www.daa.com.au/pipermail/pygtk/2008-September/015916.html
    hbox = menu_button.get_child()
    button, toggle_button = hbox.get_children()  
    img = button.get_child()
    button.remove(img)
    hbox.remove(button)
    arrow = toggle_button.get_child()
    toggle_button.remove(arrow)
    hbox = gtk.HBox()
    hbox.set_spacing(4)
    hbox.add(img)
    hbox.add(arrow)
    toggle_button.add(hbox)
    hbox.show_all()

ALBUM_ART_SIZE = 64
ALBUM_ART_X_PAD = 6

class CellRendererAlbumArt(gtk.GenericCellRenderer):  
    def __init__(self):
        self.__gobject_init__()
        self.icon = None
        self.pixbuf = None
        self.rate_bg = gtk.gdk.pixbuf_new_from_file(os.path.join(getdatapath(), 'media', 'rate_bg.png'))
        
    __gproperties__ = {
        'icon': (str, 'icon', 'icon', '', gobject.PARAM_READWRITE),
        'pixbuf': (gtk.gdk.Pixbuf, 'pixmap', 'pixmap',  gobject.PARAM_READWRITE)
    }
    
    def do_set_property(self, pspec, value):
        setattr(self, pspec.name, value)
    def do_get_property(self, pspec):
        return getattr(self, pspec.name)
    def on_get_size(self, widget, cell_area):
        return (0, 0, ALBUM_ART_SIZE + ALBUM_ART_X_PAD, ALBUM_ART_SIZE)
    def on_render(self, window, widget, background_area, cell_area, expose_area, flags):
        if self.pixbuf:
            window.draw_pixbuf(None, self.pixbuf, 0, 0, cell_area.x, cell_area.y, width=-1, height=-1, dither=gtk.gdk.RGB_DITHER_NORMAL, x_dither=0, y_dither=0)
        if self.icon:
            x = cell_area.x+(cell_area.width-self.rate_bg.get_width()) - ALBUM_ART_X_PAD # right
            y = cell_area.y+(cell_area.height-self.rate_bg.get_height()) # bottom
            window.draw_pixbuf(None, self.rate_bg, 0, 0, x, y, width=-1, height=-1, dither=gtk.gdk.RGB_DITHER_NORMAL, x_dither=0, y_dither=0)
            
            icon = widget.style.lookup_icon_set(self.icon)
            pixbuf = icon.render_icon(widget.style, widget.get_direction(), gtk.STATE_ACTIVE, gtk.ICON_SIZE_MENU, widget, detail=None)
            x = cell_area.x+(cell_area.width-pixbuf.get_width())-5 - ALBUM_ART_X_PAD # right
            y = cell_area.y+(cell_area.height-pixbuf.get_height())-5 # bottom
            window.draw_pixbuf(None, pixbuf, 0, 0, x, y, width=-1, height=-1, dither=gtk.gdk.RGB_DITHER_NORMAL, x_dither=0, y_dither=0)
        
def get_album_art(url, proxy, *extra):
     proxies = {"http": proxy} if proxy else {}
     content = urllib.urlopen(url, proxies=proxies).read()
     l = gtk.gdk.PixbufLoader()
     l.set_size(ALBUM_ART_SIZE, ALBUM_ART_SIZE)
     l.write(content)
     l.close()
     return (l.get_pixbuf(),) + extra

class PithosWindow(gtk.Window):
    __gtype_name__ = "PithosWindow"

    def __init__(self):
        """__init__ - This function is typically not called directly.
        Creation a PithosWindow requires redeading the associated ui
        file and parsing the ui definition extrenally,
        and then calling PithosWindow.finish_initializing().

        Use the convenience function NewPithosWindow to create
        PithosWindow object.

        """
        pass

    def finish_initializing(self, builder, pandora_class):
        """finish_initalizing should be called after parsing the ui definition
        and creating a PithosWindow object with it in order to finish
        initializing the start of the new PithosWindow instance.

        """
        #get a reference to the builder and set up the signals
        self.builder = builder
        self.builder.connect_signals(self)

        global launchpad_available
        if False and launchpad_available: # Disable this
            # see https://wiki.ubuntu.com/UbuntuDevelopment/Internationalisation/Coding for more information
            # about LaunchpadIntegration
            helpmenu = self.builder.get_object('menu_options')
            if helpmenu:
                LaunchpadIntegration.set_sourcepackagename('pithos')
                LaunchpadIntegration.add_items(helpmenu, 0, False, True)
            else:
                launchpad_available = False

        self.songs_model = gtk.ListStore(gobject.TYPE_PYOBJECT, str, str, gtk.gdk.Pixbuf)
        self.stations_model = gtk.ListStore(gobject.TYPE_PYOBJECT, str)
        
        self.playpause_button = self.builder.get_object('playpause_button')
        self.statusbar = self.builder.get_object('statusbar1')
        
        self.song_menu = self.builder.get_object('song_menu')
        
        self.songs_treeview = self.builder.get_object('songs_treeview')
        self.songs_treeview.set_model(self.songs_model)
        
        title_col   = gtk.TreeViewColumn()
        
        def bgcolor_data_func(column, cell, model, iter):
            if model.get_value(iter, 0) is self.current_song:
                bgcolor = column.get_tree_view().get_style().mid[gtk.STATE_NORMAL]
            else:
                bgcolor = column.get_tree_view().get_style().base[gtk.STATE_NORMAL]
            cell.set_property("cell-background", bgcolor)
                
        render_icon = CellRendererAlbumArt()
        title_col.pack_start(render_icon, expand=False)
        title_col.add_attribute(render_icon, "icon", 2)
        title_col.add_attribute(render_icon, "pixbuf", 3)
        title_col.set_cell_data_func(render_icon, bgcolor_data_func)
        
        render_text = gtk.CellRendererText()
        title_col.pack_start(render_text, expand=True)
        title_col.add_attribute(render_text, "markup", 1)
        title_col.set_cell_data_func(render_text, bgcolor_data_func)
        
        self.songs_treeview.append_column(title_col)
        
        self.songs_treeview.connect('button_press_event', self.on_treeview_button_press_event)
        
        self.stations_combo = self.builder.get_object('stations')
        self.stations_combo.set_model(self.stations_model)
        render_text = gtk.CellRendererText()
        self.stations_combo.pack_start(render_text, expand=True)
        self.stations_combo.add_attribute(render_text, "text", 1)
        self.stations_combo.set_row_separator_func(lambda model, iter: model.get_value(iter, 0) is None)
        
        #unifyMenuToolButton(self.builder.get_object("toolbutton_options"))
        
        self.player = gst.element_factory_make("playbin", "player")
        bus = self.player.get_bus()
        bus.add_signal_watch()
        bus.connect("message", self.on_message)
        self.time_format = gst.Format(gst.FORMAT_TIME)
        
        pynotify.init('pithos')
        self.notification = pynotify.Notification("Pithos","Pithos")
        
        try:
            bus = dbus.Bus(dbus.Bus.TYPE_SESSION)
            mk = bus.get_object("org.gnome.SettingsDaemon","/org/gnome/SettingsDaemon/MediaKeys")
            mk.connect_to_signal("MediaPlayerKeyPressed", self.mediakey_pressed)
        except dbus.DBusException:
            print "Could not bind media keys"
        
        self.prefs_dlg = PreferencesPithosDialog.NewPreferencesPithosDialog()
        self.preferences = self.prefs_dlg.get_preferences()
        
        self.stations_dlg = None
        
        self.playing = False
        self.current_song_index = None
        self.current_station = None
        self.current_station_id = self.preferences['last_station_id']
        
        self.buffer_percent = 100
        self.retrying = False
        self.playcount = 0
        self.gstreamer_errorcount_1 = 0
        self.gstreamer_errorcount_2 = 0
        self.gstreamer_error = ''
        self.waiting_for_playlist = False
        self.start_new_playlist = False
        
        if not self.preferences['username']:
            self.show_preferences(is_startup=True)
        
        self.pandora = pandora_class()
        self.worker = GObjectWorker()
        self.art_worker = GObjectWorker()
        self.connect()

        aa = gtk.gdk.pixbuf_new_from_file(os.path.join(getdatapath(), 'media', 'album_default.png'))
        self.default_album_art = aa.scale_simple(ALBUM_ART_SIZE, ALBUM_ART_SIZE, gtk.gdk.INTERP_BILINEAR)
    
    def worker_run(self, fn, args=(), callback=None, context=None, message=None):
        if context: self.statusbar.push(self.statusbar.get_context_id(context), message)
        if isinstance(fn,str):
            fn = getattr(self.pandora, fn)
        def cb(v):
            if context: self.statusbar.pop(self.statusbar.get_context_id(context))
            if callback: callback(v)
        self.worker.send(fn, args, cb, self.errback)
    
    def connect(self, message="Logging in..."):
        self.statusbar.push(self.statusbar.get_context_id('login'), message)
        args = (self.preferences['username'],
                self.preferences['password'],
                self.preferences['proxy'])
        self.worker.send(self.pandora.connect, args, self.pandora_ready, self.errback)
        
    @property
    def current_song(self):
        if self.current_song_index is not None:
            return self.songs_model[self.current_song_index][0]
    
    def song_changed(self, song_index):
        if song_index >= len(self.songs_model): return False
        prev = self.current_song
        
        self.stop()
        self.current_song_index = song_index
        
        if self.current_song.tired or self.current_song.rating == RATE_BAN:
            self.next_song()
            return
        
        logging.debug("Starting song: index = %i"%(song_index))
        self.buffer_percent = 100
        self.player.set_property("uri", self.current_song.audioUrl)
        self.play()
        self.playcount += 1
        
        if prev:
            self.update_song_row(prev)
        
        self.songs_treeview.scroll_to_cell(song_index, use_align=True, row_align = 1.0)
        self.songs_treeview.set_cursor(song_index, None, 0)
        
        if self.preferences['notify'] and not self.is_active():
            # popup notification if enabled and the window isn't active
            msg = "by %s from %s"%(self.current_song.artist, self.current_song.album)
            self.notification.update(self.current_song.title, msg, "audio-x-generic")
            self.notification.set_icon_from_pixbuf(self.songs_model[song_index][3])
            self.notification.show()
            
    def next_song(self, *ignore):
        next_index = self.current_song_index+1
        songs_remaining = len(self.songs_model) - next_index 
        
        if songs_remaining <= 0:
            self.get_playlist(start = True)
        else:
            self.song_changed(next_index)
        
            if songs_remaining == 1:
                # preload next playlist so there's no delay
                self.get_playlist()
        
    def play(self):
        if not self.playing:
            self.playing = True
            self.player.set_state(gst.STATE_PLAYING)
            gobject.timeout_add_seconds(1, self.update_song_row)
        self.playpause_button.set_stock_id(gtk.STOCK_MEDIA_PAUSE)
        self.update_song_row()
        
    def pause(self):
        self.playing = False
        self.player.set_state(gst.STATE_PAUSED)
        self.playpause_button.set_stock_id(gtk.STOCK_MEDIA_PLAY)
        self.update_song_row()
        
    def stop(self):
        self.playing = False
        self.player.set_state(gst.STATE_NULL)
        
    def playpause(self, *ignore):
        if self.playing:
            self.pause()
        else:
            self.play()
            
    def get_playlist(self, start = False):
        self.start_new_playlist = self.start_new_playlist or start
        if self.waiting_for_playlist: return
        
        if self.gstreamer_errorcount_1 >= self.playcount and self.gstreamer_errorcount_2 >=1:
            logging.warn("Too many gstreamer errors. Not retrying")
            self.waiting_for_playlist = 1
            self.error_dialog(self.gstreamer_error)
            return
        
        def art_callback(t):
            pixbuf, song, index = t
            if index<len(self.songs_model) and self.songs_model[index][0] is song: # in case the playlist has been reset
                logging.debug("Downloaded album art for %i"%song.index)
                self.songs_model[index][3]=pixbuf
                self.update_song_row(song)
            
        def callback(l):
            start_index = len(self.songs_model)
            for i in l:
                i.index = len(self.songs_model)
                self.songs_model.append((i, '', '', self.default_album_art))
                self.update_song_row(i)
                
                if i.artRadio: 
                    proxy = self.preferences['proxy']
                    self.art_worker.send(get_album_art, (i.artRadio, proxy, i, i.index), art_callback)

            self.statusbar.pop(self.statusbar.get_context_id('net'))
            if self.start_new_playlist:
                self.song_changed(start_index)
            self.retrying = False
            self.gstreamer_errorcount_2 = self.gstreamer_errorcount_1
            self.gstreamer_errorcount_1 = 0
            self.playcount = 0
            self.waiting_for_playlist = False
            self.start_new_playlist = False
            
        self.statusbar.push(self.statusbar.get_context_id('net'), "Getting songs...")
        self.waiting_for_playlist = True
        self.worker.send(self.current_station.get_playlist, (), callback, self.errback)
        
    def pandora_ready(self, ignore):
        self.statusbar.pop(self.statusbar.get_context_id('login'))
        self.stations_model.clear()
        self.current_station = None
        selected = None
        logging.debug("Pandora connected")
        
        for i in self.pandora.stations:
            if i.isQuickMix:
                self.stations_model.append((i, "QuickMix"))
        self.stations_model.append((None, 'sep'))
        for i in self.pandora.stations:
            if not i.isQuickMix:
                self.stations_model.append((i, i.name))
            if i.id == self.current_station_id:
                logging.debug("Restoring saved station: id = %s"%(i.id))
                selected = i
        if not selected:
            selected=self.stations_model[0][0]
        self.station_changed(selected, reconnecting = self.retrying)
            
    def errback(self, e):
        self.statusbar.pop(self.statusbar.get_context_id('net'))
        self.statusbar.pop(self.statusbar.get_context_id('login'))
        if isinstance(e, PianoAuthTokenInvalid) and not self.retrying:
            self.retrying = True
            logging.debug("Automatic retry")
            self.connect("Reconnecting...")
        elif isinstance(e, PianoError):
           self.error_dialog(e.message)
        else:
            logging.warn(e.traceback)
      
    def error_dialog(self, message):
        dialog = self.builder.get_object("error_dialog")
        dialog.format_secondary_text(message)
        response = dialog.run()
        dialog.hide()
        
        if response == 1:
            self.quit()
        elif response == 2:
            self.retrying = True
            self.gstreamer_errorcount_2 = 0
            logging.debug("Manual retry")
            self.connect("Reconnecting...")
        elif response == 3:
            self.retrying = False
            self.show_preferences()
    
    def station_index(self, station):
        return [i[0] for i in self.stations_model].index(station)
       
    def station_changed(self, station, reconnecting=False):
        if station is self.current_station: return
        self.waiting_for_playlist = False
        if not reconnecting:
            self.current_song_index = None
            self.songs_model.clear()
            self.stop()
        logging.debug("Selecting station %s; total = %i" % (station.id, len(self.stations_model)))
        self.current_station_id = station.id
        self.current_station = station
        self.get_playlist(start = not reconnecting)
        self.stations_combo.set_active(self.station_index(station))
        
        
    def on_message(self, bus, message):
        t = message.type
        if t == gst.MESSAGE_EOS:
            self.stop()
            self.next_song()
        elif message.type == gst.MESSAGE_BUFFERING:
            percent = message.parse_buffering()
            self.buffer_percent = percent
            if percent < 100:
                self.player.set_state(gst.STATE_PAUSED)
            else:
                self.player.set_state(gst.STATE_PLAYING)
            self.update_song_row()
        elif t == gst.MESSAGE_ERROR:
            self.stop()
            err, debug = message.parse_error()
            logging.error("Gstreamer error: %s, %s" % (err, debug))
            self.current_song.message = "Error: "+str(err)
            self.gstreamer_error = str(err)
            self.gstreamer_errorcount_1 += 1
            self.next_song()
    
    def song_text(self, song):
        title = cgi.escape(song.title)
        artist = cgi.escape(song.artist)
        album = cgi.escape(song.album)
        msg = []
        if song is self.current_song:
            try:
                dur_int = self.player.query_duration(self.time_format, None)[0]
                dur_str = self.format_time(dur_int)
                pos_int = self.player.query_position(self.time_format, None)[0]
                pos_str = self.format_time(pos_int)
                msg.append("%s / %s" %(pos_str, dur_str))
                if not self.playing:
                    msg.append("Paused")
            except gst.QueryError:
                pass
            if self.buffer_percent < 100:
                msg.append("Buffering (%i%%)"%self.buffer_percent)
        if song.message:
            msg.append(song.message)
        msg = " - ".join(msg)
        if not msg:
            msg = " "
        return "<b><big>%s</big></b>\nby <b>%s</b> on <b>%s</b>\n<small>%s</small>"%(title, artist, album, msg)
            
    def song_icon(self, song):
        if song.tired:
            return gtk.STOCK_JUMP_TO
        if song.rating == RATE_LOVE:
            return gtk.STOCK_ABOUT
        if song.rating == RATE_BAN:
            return gtk.STOCK_CANCEL       
            
    def update_song_row(self, song = None):
        if song is None:
            song = self.current_song
        if song:
            self.songs_model[song.index][1] = self.song_text(song)
            self.songs_model[song.index][2] = self.song_icon(song)
        return self.playing
        
    def stations_combo_changed(self, widget):
        index = widget.get_active()
        if index>=0:
            self.station_changed(self.stations_model[index][0])
                    
    def format_time(self, time_int):
        time_int = time_int / 1000000000
        s = time_int % 60
        time_int /= 60
        m = time_int % 60
        time_int /= 60
        h = time_int
        
        if h:
            return "%i:%02i:%021"%(h,m,s)
        else:
            return "%i:%02i"%(m,s)
    
    def selected_song(self):
        sel = self.songs_treeview.get_selection().get_selected()
        if sel:
            return self.songs_treeview.get_model().get_value(sel[1], 0)
            
    def on_menuitem_love(self, widget):
        sel = self.selected_song()
        def callback(l):
            self.statusbar.pop(self.statusbar.get_context_id('net'))
            self.update_song_row(sel)
        self.statusbar.push(self.statusbar.get_context_id('net'), "Loving song...")
        self.worker.send(sel.rate, (RATE_LOVE,), callback, self.errback)
        
    def on_menuitem_ban(self, widget):
        sel = self.selected_song()
        def callback(l):
            self.statusbar.pop(self.statusbar.get_context_id('net'))
            self.update_song_row(sel)
        self.statusbar.push(self.statusbar.get_context_id('net'), "Banning song...")
        self.worker.send(sel.rate, (RATE_BAN,), callback, self.errback)
        if sel is self.current_song:
            self.next_song()
        
    def on_menuitem_tired(self, widget):
        sel = self.selected_song()
        def callback(l):
            self.statusbar.pop(self.statusbar.get_context_id('net'))
            self.update_song_row(sel)
        self.statusbar.push(self.statusbar.get_context_id('net'), "Putting song on shelf...")
        self.worker.send(sel.set_tired, (), callback, self.errback)
        if sel is self.current_song:
            self.next_song()
    
    def on_menuitem_info(self, widget):
        song = self.selected_song()
        webbrowser.open(song.songDetailURL)
        
    def on_treeview_button_press_event(self, treeview, event):
        if event.button == 3:
            x = int(event.x)
            y = int(event.y)
            time = event.time
            pthinfo = treeview.get_path_at_pos(x, y)
            if pthinfo is not None:
                path, col, cellx, celly = pthinfo
                treeview.grab_focus()
                treeview.set_cursor( path, col, 0)
                self.song_menu.popup( None, None, None, event.button, time)
            return True
    
    def station_properties(self, *ignore):
        webbrowser.open(self.current_station.info_url)
    
    def mediakey_pressed(self, *args):
        for i in args:
            if i == 'Play':
                self.playpause()
            if i == 'Next':
                self.next_song()
            if i == 'Stop':
                self.pause()
    
    def about(self, widget, data=None):
        """about - display the about box for pithos """
        about = AboutPithosDialog.NewAboutPithosDialog()
        response = about.run()
        about.destroy()

    def show_preferences(self, widget=None, data=None, is_startup=False):
        """preferences - display the preferences window for pithos """
        old_prefs = dict(self.preferences)
        response = self.prefs_dlg.run()
        self.prefs_dlg.hide()
        
        if response == gtk.RESPONSE_OK:
            self.preferences = self.prefs_dlg.get_preferences()
            if (not is_startup and (
                   self.preferences['username'] != old_prefs['username']
                or self.preferences['password'] != old_prefs['password']
                or self.preferences['proxy']    != old_prefs['proxy'])):
                    self.connect()
                    
    def stations_dialog(self, *ignore):
        if self.stations_dlg:
            self.stations_dlg.show()
        else:
            self.stations_dlg = StationsDialog.NewStationsDialog(self)
            self.stations_dlg.show_all()
        

    def quit(self, widget=None, data=None):
        """quit - signal handler for closing the PithosWindow"""
        self.destroy()

    def on_destroy(self, widget, data=None):
        """on_destroy - called when the PithosWindow is close. """
        #clean up code for saving application state should be added here
        self.preferences['last_station_id'] = self.current_station_id
        self.prefs_dlg.save()
        gtk.main_quit()

def NewPithosWindow(pandora_class):
    """NewPithosWindow - returns a fully instantiated
    PithosWindow object. Use this function rather than
    creating a PithosWindow directly.
    """

    #look for the ui file that describes the ui
    ui_filename = os.path.join(getdatapath(), 'ui', 'PithosWindow.ui')
    if not os.path.exists(ui_filename):
        ui_filename = None

    builder = gtk.Builder()
    builder.add_from_file(ui_filename)
    window = builder.get_object("pithos_window")
    window.finish_initializing(builder, pandora_class)
    return window

if __name__ == "__main__":
    #support for command line options
    import logging, optparse
    parser = optparse.OptionParser(version="%prog %ver")
    parser.add_option("-v", "--verbose", action="store_true", dest="verbose", help="Show debug messages")
    parser.add_option("-t", "--test", action="store_true", dest="test", help="Use a mock web interface instead of connecting to the real Pandora server")
    (options, args) = parser.parse_args()

    #set the logging level to show debug messages
    if options.verbose:
        logging.basicConfig(level=logging.DEBUG, format="%(levelname)s - %(module)s:%(funcName)s:%(lineno)d - %(message)s")
        logging.debug('logging enabled')
        
    if options.test:
        from pithos.fakepiano import *
    else:
        from pithos.libpiano import *

    #run the application
    window = NewPithosWindow(PianoPandora)
    window.show()
    gtk.main()

